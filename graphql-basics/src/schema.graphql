type Query {
	users(query: String): [User!]!
	posts: [Post!]!
	comments: [Comment!]!
}

type Mutation {
	createUser(data: CreateUserInput!): User!
	createPost(post: CreatePostInput!): Post!
	createComment(comment: CreateCommentInput!): Comment!

	deleteUser(id: ID!): User!
	deletePost(id: ID!): Post!
	deleteComment(id: ID!): Comment!

	updateUser(id: ID!, data: updateUserInput): User!
	updatePost(id: ID!, post: updatePostInput): Post!
	updateComment(id: ID!, comment: updateCommentInput): Comment!
}

type Subscription {
	comment(postId: ID!): CommentSubscriptionPayload!
	post: PostSubsciptionPayload!
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

input CreateUserInput {
	name: String!
	email: String!
	age: Int!
}

input CreatePostInput {
	title: String!
	body: String!
	isPublished: Boolean!
	author: ID!
}

input CreateCommentInput {
	text: String!
	author: ID!
	post: ID!
}

input updateUserInput {
	name: String
	email: String
	age: Int
}

input updatePostInput {
	title: String
	body: String
	isPublished: Boolean
}

input updateCommentInput {
	text: String
}

type User {
	id: ID!
	name: String!
	age: Int
	email: String!
	posts: [Post!]!
	comments: [Comment!]!
}

type Post {
	id: ID!
	title: String!
	body: String!
	isPublished: Boolean!
	author: User!
	comments: [Comment!]!
}

type Comment {
	id: ID!
	text: String!
	author: User!
	post: Post!
}

type PostSubscriptionPayload {
	mutation: MutationType!
	data: Post!
}

type CommentSubscriptionPayload {
	mutation: MutationType!
	text: Comment!
}
